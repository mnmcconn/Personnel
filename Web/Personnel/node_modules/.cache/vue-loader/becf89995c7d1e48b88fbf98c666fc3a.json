{"remainingRequest":"C:\\Users\\Mitchel\\Documents\\GitHub\\Personnel\\Web\\Personnel\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Mitchel\\Documents\\GitHub\\Personnel\\Web\\Personnel\\src\\components\\layouts\\Personnel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Mitchel\\Documents\\GitHub\\Personnel\\Web\\Personnel\\src\\components\\layouts\\Personnel.vue","mtime":1628870577706},{"path":"C:\\Users\\Mitchel\\Documents\\GitHub\\Personnel\\Web\\Personnel\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Mitchel\\Documents\\GitHub\\Personnel\\Web\\Personnel\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Mitchel\\Documents\\GitHub\\Personnel\\Web\\Personnel\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport repo from \"@/utils/repo\"\n//import spinner from \"@/components/controls/Spinner\"\nexport default {\n    name: \"Personnel\",\n   // components: { spinner },\n    data() {\n        return {\n            isLoading: true,\n\n            manager: null,\n\n            managers: [],\n            employees: [],\n\n            selections: {\n                NodeGroupID: null,\n                UserID: null\n            },\n        }\n    },\n    mounted() {\n        this.refresh();\n    },\n    methods: {\n        getManagers() {\n            return repo.employees.listManagers().then(res => {\n                this.managers = res.data.Data;\n                this.managers.sort((a, b) => (a.DisplayName.toLowerCase() > b.DisplayName.toLowerCase()) ? 1 : -1)\n                this.getEmployees();\n            });\n        },\n        getEmployees() {\n            return repo.employees.list(this.manager).then(res => {\n                this.employees = res.data.Data;\n                this.employees.sort((a, b) => (a.LastName.toLowerCase() > b.LastName.toLowerCase()) ? 1 : -1)\n            });\n        },\n        async refresh() {\n            this.isLoading = true\n\n            this.getManagers();\n\n            this.isLoading = false;\n        },\n        handleResponse(res) {\n\n            if (res.data.Success)\n                return true;\n\n            //ct.incite.notify.error(res.data.Message, \"Error\");\n\n            return false;\n        },\n        managerChange() {\n            this.getEmployees();\n        },\n\n    }\n\n};\n",{"version":3,"sources":["Personnel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"Personnel.vue","sourceRoot":"src/components/layouts","sourcesContent":["<template>\r\n    <div class=\"container-fluid\">\r\n        <!--<div class=\"row\" v-if=\"isLoading\">\r\n        <spinner :msg=\"'loading, please wait...'\"></spinner>\r\n        v-show=\"!isLoading\"\r\n    </div>-->\r\n        <div class=\"card\">\r\n            <div class=\"card-heading\">\r\n                <div class=\"row\">\r\n                    <div>\r\n                        <h1 class=\"lead\">Add New Employee</h1>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm-6\">\r\n                        <div class=\"form-group\">\r\n                            <label>Manager</label>\r\n                            <select class=\"form-control\" v-model=\"manager\" @change=\"managerChange()\">\r\n                                <option v-for=\"x in managers\" :key=\"x.EmployeeID\" :value=\"x\">{{x.DisplayName}}</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm-12 table-responsive\">\r\n                        <table class=\"table table-striped table-condensed table-bordered table-hover small\">\r\n                            <thead>\r\n                                <tr class=\"lightgrey\">\r\n                                    <td><b>Employee ID</b></td>\r\n                                    <td><b>Last Name</b></td>\r\n                                    <td><b>First Name</b></td>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr v-for=\"e in employees\" :key=\"e.EmployeeID\" :value=\"e\">\r\n                                    <td>{{e.EmployeeCode}}</td>\r\n                                    <td>{{e.LastName}}</td>\r\n                                    <td>{{e.FirstName}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-6\">\r\n                    <div class=\"form-group\">\r\n                        <button type=\"button\" class=\"btn btn-sm btn-primary\" @click=\"addEmployee()\" aria-label=\"Add Employee\">\r\n                            <span class=\"fa fa-add\" aria-hidden=\"true\"> Add Employee</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import repo from \"@/utils/repo\"\r\n    //import spinner from \"@/components/controls/Spinner\"\r\n    export default {\r\n        name: \"Personnel\",\r\n       // components: { spinner },\r\n        data() {\r\n            return {\r\n                isLoading: true,\r\n\r\n                manager: null,\r\n\r\n                managers: [],\r\n                employees: [],\r\n\r\n                selections: {\r\n                    NodeGroupID: null,\r\n                    UserID: null\r\n                },\r\n            }\r\n        },\r\n        mounted() {\r\n            this.refresh();\r\n        },\r\n        methods: {\r\n            getManagers() {\r\n                return repo.employees.listManagers().then(res => {\r\n                    this.managers = res.data.Data;\r\n                    this.managers.sort((a, b) => (a.DisplayName.toLowerCase() > b.DisplayName.toLowerCase()) ? 1 : -1)\r\n                    this.getEmployees();\r\n                });\r\n            },\r\n            getEmployees() {\r\n                return repo.employees.list(this.manager).then(res => {\r\n                    this.employees = res.data.Data;\r\n                    this.employees.sort((a, b) => (a.LastName.toLowerCase() > b.LastName.toLowerCase()) ? 1 : -1)\r\n                });\r\n            },\r\n            async refresh() {\r\n                this.isLoading = true\r\n\r\n                this.getManagers();\r\n\r\n                this.isLoading = false;\r\n            },\r\n            handleResponse(res) {\r\n\r\n                if (res.data.Success)\r\n                    return true;\r\n\r\n                //ct.incite.notify.error(res.data.Message, \"Error\");\r\n\r\n                return false;\r\n            },\r\n            managerChange() {\r\n                this.getEmployees();\r\n            },\r\n\r\n        }\r\n\r\n    };\r\n</script>\r\n\r\n"]}]}